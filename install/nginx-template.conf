upstream upstream-user-server {
        server  127.0.0.1:22550;
}
upstream upstream-device-server {
        server  127.0.0.1:22551;
}

#user server reverse proxy and static file server
server {
	listen ${USER_PORT} ssl;
	server_name sht-iot-users;

	ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
	ssl_client_certificate /etc/ssl/private/${DOMAIN}/users/users-ca-crt.pem; 
	ssl_verify_client optional;
	location / {
		if ($ssl_client_verify != SUCCESS) {
			return 403;
		}
        #serve static files
		root /opt/sht-iot/static;
		index index.html index.htm;
	}

	location /socket.io/ {
		if ($ssl_client_verify != SUCCESS) {
		    return 403;
        }
        proxy_pass              http://upstream-user-server;
        proxy_redirect off;

        proxy_http_version      1.1;

        proxy_set_header        Upgrade                 $http_upgrade;
        proxy_set_header        Connection              "upgrade";

        proxy_set_header        Host                    $host;
        proxy_set_header        X-Real-IP               $remote_addr;
        proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
	}
}

#user server (WITHOUT user cert) reverse proxy and static file server
server {
	listen ${USER_PORT_NO_CERT} ssl;
	server_name sht-iot-users-no-cert;

	ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
	
	auth_basic "Enter username and password";
	auth_basic_user_file /etc/nginx/.iothtpasswd;
		
	location / {
        #serve static files
		root /opt/sht-iot/static;
		index index.html index.htm;
	}

	location /socket.io/ {
        proxy_pass              http://upstream-user-server;
        proxy_redirect off;

        proxy_http_version      1.1;

        proxy_set_header        Upgrade                 $http_upgrade;
        proxy_set_header        Connection              "upgrade";

        proxy_set_header        Host                    $host;
        proxy_set_header        X-Real-IP               $remote_addr;
        proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
	}
}

#device server reverse proxy
server {
	listen  ${DEVICE_PORT} ssl;
	server_name sht-iot-devices;

	ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

	ssl_client_certificate /etc/ssl/private/${DOMAIN}/devices/devices-ca-crt.pem;
    ssl_verify_client optional;
	
	location /socket.io/ {
		if ($ssl_client_verify != SUCCESS) {
            return 403;
        }
        proxy_pass              http://upstream-device-server;
        proxy_redirect off;

        proxy_http_version      1.1;

        proxy_set_header        Upgrade                 $http_upgrade;
        proxy_set_header        Connection              "upgrade";

        proxy_set_header        Host                    $host;
        proxy_set_header        X-Real-IP               $remote_addr;
        proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
	}
}

#update server reverse proxy
server {
	listen       ${DEVICE_UPDATE_PORT} ssl;
	server_name  sht-iot-mockup-devices-update;

	ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

	ssl_client_certificate /etc/ssl/private/${DOMAIN}/devices/devices-ca-crt.pem;
    ssl_verify_client optional;
	
	location / {
		if ($ssl_client_verify != SUCCESS) {
            return 403;
        }
		proxy_pass http://localhost:22552;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
	}
}
